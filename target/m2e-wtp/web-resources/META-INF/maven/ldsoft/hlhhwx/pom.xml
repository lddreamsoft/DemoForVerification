<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<!-- 指定了当前POM的版本 -->
	<modelVersion>4.0.0</modelVersion>
	<groupId>ldsoft</groupId><!-- 公司网址+项目名 -->
	<artifactId>hlhhwx</artifactId><!-- 项目名+模块名 -->
	<packaging>war</packaging><!-- 不指定默认打包成jar包 -->
	<version>0.0.1-SNAPSHOT</version><!--第1个0：大版本号，第2个0：分支版本号，第3个0：表示小版本号 0.0.1.snapshot -->
	<name>hlhhwx</name><!-- 项目描述名 -->
	<url>http://www.dfhlhh.com</url><!-- 项目地址 -->

	<!--不加上这句，JSP文件中的中文会出现乱码 -->
	<properties>
	  <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	  <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties>

	<build>

		<!-- 一定要加上resources定义，否则maven不会打包properties文件 -->
		<resources>
	      <resource>
	        <directory>src/main/java</directory>
	        <includes>
	          <include>**/*.*</include>
	        </includes>
	      </resource>
	      <resource>
	        <directory>src/main/resources</directory>
	      </resource>
	    </resources>

		<finalName>${projectName}</finalName>
		<plugins>

			<!-- 一定要加上该插件，否则图标字体无法使用 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<filteringDeploymentDescriptors>true</filteringDeploymentDescriptors>
					<webResources>
						<resource>
							<directory>${basedir}/src/main/webapp</directory>
							<targetPath />
							<filtering>true</filtering>
							<excludes>
								<exclude>**/*.woff</exclude>
								<exclude>**/*.woff2</exclude>
								<exclude>**/*.ttf</exclude>
							</excludes>
						</resource>
					</webResources>
				</configuration>
			</plugin>


			<!-- compiler插件, 设定JDK版本 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.6.0</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<showWarnings>true</showWarnings>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>

			<!-- war打包插件, 设定war包名称不带版本号 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>3.0.0</version>
				<configuration>
					<warName>${project.artifactId}</warName>
					<webResources>
						<resource>
							<directory>src/main/webapp</directory>
							<includes>
								<include>*.*</include>
								<include>**/*.*</include>
							</includes>
							<filtering>true</filtering>
						</resource>
					</webResources>
				</configuration>
			</plugin>


		</plugins>

	</build>



	<dependencies>
	
		<!-- 引入web工程JAR包，如果直接引入web工程，spring找不到工程中的类 -->
		<dependency>
		    <groupId>ldsoft.hlhh</groupId>
		    <artifactId>web</artifactId>
		    <version>1.0</version>
		</dependency>
		
	
		<!-- 引入图片缩略图处理包 -->
		<dependency>
		    <groupId>net.coobird</groupId>
		    <artifactId>thumbnailator</artifactId>
		    <version>0.4.7</version>
		</dependency>
		
	
		<!-- 引入阿里大于短信处理包 -->
		<dependency>
			<groupId>com.taobao</groupId>
			<artifactId>SMS</artifactId>
			<version>1.0</version>
		</dependency>

		<!-- 引入excel处理包 -->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>3.9</version>
		</dependency>


		<!-- 对上传成功的图片在服务器端生成缩略图 -->
		<!-- https://mvnrepository.com/artifact/net.coobird/thumbnailator -->
		<!-- 版本 0.4.8 maven 引入有问题，直接引入源码 -->

		<!-- jquery.fileupload依赖 -->
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>1.9.13</version>
		</dependency>

		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-core-asl</artifactId>
			<version>1.9.13</version>
		</dependency>

		<!-- 引入百度ueditor jar包 开始 -->
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.10</version>
		</dependency>

		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.3.1</version>
		</dependency>

		<dependency>
			<groupId>com.baidu</groupId>
			<artifactId>ueditor</artifactId>
			<version>1.1.2</version>
		</dependency>
		
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.4</version>
		</dependency>

		<!-- 引入百度ueditor jar包 结束 -->

		<!-- 引入google生成二维码jar包 -->
		<!-- https://mvnrepository.com/artifact/com.google.zxing/core -->
		<dependency>
			<groupId>com.google.zxing</groupId>
			<artifactId>core</artifactId>
			<version>3.3.0</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient -->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5.2</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.json/json 处理json对象 -->
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>20160810</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.thoughtworks.xstream/xstream 
			用于将java entity对象转换成XML -->
		<dependency>
			<groupId>com.thoughtworks.xstream</groupId>
			<artifactId>xstream</artifactId>
			<version>1.4.9</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/dom4j/dom4j 用于读取xml文档 -->
		<dependency>
			<groupId>dom4j</groupId>
			<artifactId>dom4j</artifactId>
			<version>1.6.1</version>
		</dependency>

		<!-- redis和memcached用于部分替代session在分布式客户端之间进行数据共享 -->


		<!--protostuff为第三方的对象序列化工具，比java内置的对象序列化功能效率高，在高并发下有优势 -->
		<dependency>
			<groupId>com.dyuproject.protostuff</groupId>
			<artifactId>protostuff-core</artifactId>
			<version>1.0.12</version>
		</dependency>

		<dependency>
			<groupId>com.dyuproject.protostuff</groupId>
			<artifactId>protostuff-runtime</artifactId>
			<version>1.0.10</version>
		</dependency>

		<!-- 引入redis客户端：Jedis -->
		<dependency>
			<groupId>redis.clients</groupId>
			<artifactId>jedis</artifactId>
			<version>2.9.0</version>
		</dependency>

		<!-- 引入memcached客户端：xmemcached作session共享 -->
		<!-- <dependency> <groupId>com.googlecode.xmemcached</groupId> <artifactId>xmemcached</artifactId> 
			<version>2.1.0</version> </dependency> -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version><!-- 4.0版本使用注解的方式来运行，3.0版本用编程的方式运行。 -->
			<scope>test</scope>
		</dependency>

		<!-- 补全项目其它依赖 日志：slf4j,log4j,logback,common-logging slf4j是规范接口，相当 于日志的接口，具体实现是： 
			log4j,logback,common-logging 本项目使用：slf4j+logback -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.21</version>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>1.1.7</version>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.1.7</version>
		</dependency>

		<!-- 数据库相关依赖 -->
		<!--数据库驱动 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>6.0.5</version>
		</dependency>

		<!-- 数据库连接池 -->
		<dependency>
			<groupId>c3p0</groupId>
			<artifactId>c3p0</artifactId>
			<version>0.9.1.2</version>
		</dependency>

		<!-- DAO框架 Mybatis -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.3.0</version>
		</dependency>

		<dependency>
			<!-- mybatis自身实现的整合依赖 -->
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.3.0</version>
		</dependency>

		<!-- servlet web相关依赖 -->
		<dependency>
			<groupId>taglibs</groupId>
			<artifactId>standard</artifactId>
			<version>1.1.2</version>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>

		<!-- json 依赖包 -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.5.4</version>
		</dependency>

		<dependency> <!--用于拦截器 -->
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<scope>provided</scope>
		</dependency>
		
		<!-- spring依赖 -->
		<!-- spring核心依赖 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>4.3.3.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>4.3.3.RELEASE</version>
		</dependency>

		<!-- 包扫描 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>4.3.3.RELEASE</version>
		</dependency>

		<!-- springDAO层的依赖 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>4.3.3.RELEASE</version>
		</dependency>

		<dependency>
			<!-- spring事务相关的依赖 -->
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>4.3.3.RELEASE</version>
		</dependency>

		<!-- spring web相关的依赖 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>4.3.3.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>4.3.3.RELEASE</version>
		</dependency>

		<!-- spring test相关的依赖 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>4.3.3.RELEASE</version>
		</dependency>
	</dependencies>

</project>
